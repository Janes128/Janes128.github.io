{"title":"Briefly Class in C++","date":"2023-03-18T12:15:26.000Z","date_formatted":{"ll":"Mar 18, 2023","L":"03/18/2023","MM-DD":"03-18"},"link":"2023/03/18/Briefly-Class-in-C","tags":["C++","Coding"],"categories":["Software_Engineering"],"updated":"2023-03-18T12:37:55.468Z","content":"<blockquote>\n<p>前言：這是我的第一篇文章，敘述粗淺的C++類別建構與介紹，如有任何建議請多指教！<br>\nHackMD PPT Form: <a href=\"https://hackmd.io/@1_KXOGKTSJ-h5DpyHTXySg/H1vwZ9krq\" target=\"_blank\">https://hackmd.io/@1_KXOGKTSJ-h5DpyHTXySg/H1vwZ9krq</a><br>\nSpeaker: Jimmy Shen<br>\nData: 2022/04/26</p>\n</blockquote>\n<h2 id=\"1.-what-is-c++-class\">1. What is C++ Class<a title=\"#1.-what-is-c++-class\" href=\"#1.-what-is-c++-class\"></a></h2>\n<ul>\n<li>A class in C++ is a <strong>user-defined</strong> type or data structure declared with keyword class that has <strong>data and functions</strong>. (from Wiki)</li>\n<li>How to implement:\n<ul>\n<li><em>Object Based</em>: What kind of Class. How to build a Class.</li>\n<li><em>Object Oriented</em>: Relationship of multiple Classes.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"2.-how-to-build-a-class---header-file\">2. How to Build a Class - Header File<a title=\"#2.-how-to-build-a-class---header-file\" href=\"#2.-how-to-build-a-class---header-file\"></a></h2>\n<h3 id=\"2.1-header-file-and-class-declaration\">2.1 Header File and Class Declaration<a title=\"#2.1-header-file-and-class-declaration\" href=\"#2.1-header-file-and-class-declaration\"></a></h3>\n<ul>\n<li>.h(header files for own)\n<ul>\n<li>#include&lt;&gt; and #include&quot;&quot;</li>\n<li>Classes declaration</li>\n<li>Header guard</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> COMPLEX_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COMPLEX_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The contexts we write</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2.2-header-file-layout\">2.2 Header File Layout<a title=\"#2.2-header-file-layout\" href=\"#2.2-header-file-layout\"></a></h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> COMPLEX_    <span class=\"comment\">// Header guard</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COMPLEX_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span>    <span class=\"comment\">// Include other header</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">////////////    </span></span><br><span class=\"line\"><span class=\"comment\">/// class head</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">complex</span>         <span class=\"comment\">// 1. 類－聲明: class declarations</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/// class body</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">complex</span> (<span class=\"type\">double</span> r = <span class=\"number\">0</span>, <span class=\"type\">double</span> i = <span class=\"number\">0</span>)</span><br><span class=\"line\">        : <span class=\"built_in\">re</span> (r), <span class=\"built_in\">im</span> (i)</span><br><span class=\"line\">        &#123; &#125;</span><br><span class=\"line\">    complex&amp; <span class=\"keyword\">operator</span> += (<span class=\"type\">const</span> complex&amp;); <span class=\"comment\">// 定義放在body之外做定義</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">real</span> <span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> re; &#125;    <span class=\"comment\">// 有些函數可以在此直接定義</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">imag</span> <span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> im; &#125;    <span class=\"comment\">// 這種定義方式叫做內聯(inline)，優點是編譯速度快，但不能過於複雜</span></span><br><span class=\"line\">    <span class=\"comment\">// 另外，回傳值前加入const，表示回傳值不可改變</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">double</span> re, im;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">////////////</span></span><br><span class=\"line\">complex::function ... <span class=\"comment\">// 2. 類－定義: class definition</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"3.-how-to-build-a-class---class-members\">3. How to Build a Class - Class Members<a title=\"#3.-how-to-build-a-class---class-members\" href=\"#3.-how-to-build-a-class---class-members\"></a></h2>\n<h3 id=\"3.1-access-levels\">3.1 Access Levels<a title=\"#3.1-access-levels\" href=\"#3.1-access-levels\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>Levels</th>\n<th style=\"text-align:center\">In Class</th>\n<th style=\"text-align:center\">Out of Class</th>\n<th style=\"text-align:center\">Can be inherited</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>public</strong></td>\n<td style=\"text-align:center\">:OK:</td>\n<td style=\"text-align:center\">:OK:</td>\n<td style=\"text-align:center\">:OK:</td>\n</tr>\n<tr>\n<td><strong>private</strong></td>\n<td style=\"text-align:center\">:OK:</td>\n<td style=\"text-align:center\">:no_entry:</td>\n<td style=\"text-align:center\">:no_entry:</td>\n</tr>\n<tr>\n<td><strong>protected</strong></td>\n<td style=\"text-align:center\">:OK:</td>\n<td style=\"text-align:center\">:no_entry:</td>\n<td style=\"text-align:center\">:OK:</td>\n</tr>\n</tbody>\n</table></div></div><hr>\n<h3 id=\"3.2-setter-and-getter\">3.2 Setter and Getter<a title=\"#3.2-setter-and-getter\" href=\"#3.2-setter-and-getter\"></a></h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> salary;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// Setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_salary</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123; salary = s; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Getter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">salary</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> salary; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// or get_salary()...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3.3-inline-function---1\">3.3 Inline Function - 1<a title=\"#3.3-inline-function---1\" href=\"#3.3-inline-function---1\"></a></h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SayHello</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Out of class</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">HelloWorld::SayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3.3-inline-function---2\">3.3 Inline Function - 2<a title=\"#3.3-inline-function---2\" href=\"#3.3-inline-function---2\"></a></h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HelloWorld hw;</span><br><span class=\"line\">    hw.<span class=\"built_in\">SayHello</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">///////// After Compiled //////////</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HelloWorld hw;</span><br><span class=\"line\">    <span class=\"comment\">//hw.SayHello();    // Directly extent here!</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3.4-constructor-and-big-three-(rule-of-three)\">3.4 Constructor and Big Three (Rule of Three)<a title=\"#3.4-constructor-and-big-three-(rule-of-three)\" href=\"#3.4-constructor-and-big-three-(rule-of-three)\"></a></h3>\n<style>\ncode.blue {\n  color: #337AB7 !important;\n}\ncode.orange {\n  color: #F7A004 !important;\n}\n</style>\n<ul>\n<li><strong>Constructor</strong> (建構子):<br>\n<code class=\"orange\">String(const char* cstr=0)</code></li>\n<li><strong>Destructor</strong> (解構子): <code class=\"blue\">~String()</code></li>\n<li><strong>Copy constructor</strong> (複製建構子): <code class=\"blue\">String(const String&amp; str)</code></li>\n<li><strong>Copy assignment operator</strong> (設定運算子): <code class=\"blue\">String&amp; operator=(const String&amp; str)</code></li>\n</ul>\n<hr>\n<h3 id=\"3.5-initialization-list\">3.5 Initialization List<a title=\"#3.5-initialization-list\" href=\"#3.5-initialization-list\"></a></h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Point &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"type\">int</span> y;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Point</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>, <span class=\"type\">int</span> j = <span class=\"number\">0</span>)</span><br><span class=\"line\">        :<span class=\"built_in\">x</span>(i), <span class=\"built_in\">y</span>(j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        Equal to: </span></span><br><span class=\"line\"><span class=\"comment\">\t\tPoint(int i = 0, int j = 0) &#123; </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tx = i; </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\ty = j; </span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125; </span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4.-passing-and-returning-values\">4. Passing and Returning Values<a title=\"#4.-passing-and-returning-values\" href=\"#4.-passing-and-returning-values\"></a></h2>\n<hr>\n<h3 id=\"4.1.1-pass-by-value\">4.1.1 Pass by Value<a title=\"#4.1.1-pass-by-value\" href=\"#4.1.1-pass-by-value\"></a></h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建構子中，傳遞的double值 r 以及 i</span></span><br><span class=\"line\"><span class=\"built_in\">complex</span> (<span class=\"type\">double</span> r = <span class=\"number\">0</span>, <span class=\"type\">double</span> i = <span class=\"number\">0</span>)    <span class=\"comment\">// Here</span></span><br><span class=\"line\">    : <span class=\"built_in\">re</span> (r), <span class=\"built_in\">im</span> (i)</span><br><span class=\"line\">    &#123; &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4.1.2-pass-by-reference\">4.1.2 Pass by Reference<a title=\"#4.1.2-pass-by-reference\" href=\"#4.1.2-pass-by-reference\"></a></h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ostream傳遞位址，os這個變數將會被改變</span></span><br><span class=\"line\">ostream&amp;</span><br><span class=\"line\"><span class=\"keyword\">operator</span> &lt;&lt; (ostream&amp; os, <span class=\"type\">const</span> complex&amp; x)&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> os &lt;&lt; <span class=\"string\">&#x27;(&#x27;</span> &lt;&lt; <span class=\"built_in\">real</span> (x) &lt;&lt; <span class=\"string\">&#x27;,&#x27;</span></span><br><span class=\"line\">              &lt;&lt; <span class=\"built_in\">imag</span> (x) &lt;&lt; <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4.1.3-pass-by-reference-to-constant\">4.1.3 Pass by Reference to Constant<a title=\"#4.1.3-pass-by-reference-to-constant\" href=\"#4.1.3-pass-by-reference-to-constant\"></a></h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">complex&amp; <span class=\"keyword\">operator</span> += (<span class=\"type\">const</span> complex&amp;);</span><br><span class=\"line\"><span class=\"comment\">// += 右邊的變數，是被加的，不會改變其量值，因此加上const</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4.2.1-return-by-value\">4.2.1 Return by Value<a title=\"#4.2.1-return-by-value\" href=\"#4.2.1-return-by-value\"></a></h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">real</span> <span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> re; &#125;    <span class=\"comment\">// 回傳值，因其沒有位址</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4.2.2-return-by-reference\">4.2.2 Return by Reference<a title=\"#4.2.2-return-by-reference\" href=\"#4.2.2-return-by-reference\"></a></h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">complex&amp; <span class=\"keyword\">operator</span> += ( <span class=\"type\">const</span> complex&amp; );    <span class=\"comment\">// 回傳的值需要&quot;賦值&quot; 給變數</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"5.-appendix---smart-pointer\">5. Appendix - Smart Pointer<a title=\"#5.-appendix---smart-pointer\" href=\"#5.-appendix---smart-pointer\"></a></h2>\n<hr>\n<h3 id=\"5.1-how-to-use\">5.1 How to Use<a title=\"#5.1-how-to-use\" href=\"#5.1-how-to-use\"></a></h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span>* a = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">0</span>);  <span class=\"comment\">// allocate memory</span></span><br><span class=\"line\"><span class=\"type\">int</span> b = *a;           <span class=\"comment\">// dereference</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> a;             <span class=\"comment\">// release resource</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////// Use Smart pointer ////////</span></span><br><span class=\"line\"><span class=\"function\">std::unique_ptr&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">( <span class=\"keyword\">new</span> <span class=\"type\">int</span>(<span class=\"number\">0</span>) )</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// or: std::unique_ptr&lt;int&gt; a = make_unique&lt;int&gt;(0);</span></span><br><span class=\"line\"><span class=\"type\">int</span> b = *a;</span><br><span class=\"line\"><span class=\"comment\">// NO NEED to release &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"6.-appendix---enum-class\">6. Appendix - Enum Class<a title=\"#6.-appendix---enum-class\" href=\"#6.-appendix---enum-class\"></a></h2>\n<hr>\n<h3 id=\"6.1-how-to-use\">6.1 How to Use<a title=\"#6.1-how-to-use\" href=\"#6.1-how-to-use\"></a></h3>\n<p><img src=\"https://i.imgur.com/WPBFLSn.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<hr>\n<h2 id=\"7.-appendix---coding-style\">7. Appendix - Coding Style<a title=\"#7.-appendix---coding-style\" href=\"#7.-appendix---coding-style\"></a></h2>\n<hr>\n<h3 id=\"7.1-reference\">7.1 Reference<a title=\"#7.1-reference\" href=\"#7.1-reference\"></a></h3>\n<p><a href=\"https://tw-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents.html\" target=\"_blank\">https://tw-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents.html</a></p>\n<hr>\n<h2 id=\"thank-you!-:sheep:\">Thank you! :sheep:<a title=\"#thank-you!-:sheep:\" href=\"#thank-you!-:sheep:\"></a></h2>\n<hr>\n<h2 id=\"reference\">Reference<a title=\"#reference\" href=\"#reference\"></a></h2>\n<p><a href=\"/B4rgBitCTz2KlMUy7A8_ig\">C++ 物件導向高級程式學習筆記</a><br>\n<a href=\"https://eecs280staff.github.io/notes/16_The_Big_Three.html\" target=\"_blank\">The Big Three</a><br>\n<a href=\"https://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/\" target=\"_blank\">When do we use Initializer List in C++?</a><br>\n<a href=\"https://dotblogs.com.tw/v6610688/2013/11/27/introduction_inline_function\" target=\"_blank\">[C++]內嵌函數（inline　function）筆記</a><br>\n<a href=\"https://vinesmsuic.github.io/2020/01/09/c++-initializationlists/#initializer-list\" target=\"_blank\">C++ Constructor後面的&quot;:&quot;是什麼鬼意思？ (Initialization List 教學)</a><br>\n<a href=\"https://kheresy.wordpress.com/2019/03/27/using-enum-class/\" target=\"_blank\">使用 enum class 取代傳統的 enum</a></p>\n","next":{"title":"Hello World","link":"2023/03/05/hello-world"},"plink":"http://Janes128.github.io/2023/03/18/Briefly-Class-in-C/","toc":[{"id":"1.-what-is-c++-class","title":"1. What is C++ Class","index":"1"},{"id":"2.-how-to-build-a-class---header-file","title":"2. How to Build a Class - Header File","index":"2","children":[{"id":"2.1-header-file-and-class-declaration","title":"2.1 Header File and Class Declaration","index":"2.1"},{"id":"2.2-header-file-layout","title":"2.2 Header File Layout","index":"2.2"}]},{"id":"3.-how-to-build-a-class---class-members","title":"3. How to Build a Class - Class Members","index":"3","children":[{"id":"3.1-access-levels","title":"3.1 Access Levels","index":"3.1"},{"id":"3.2-setter-and-getter","title":"3.2 Setter and Getter","index":"3.2"},{"id":"3.3-inline-function---1","title":"3.3 Inline Function - 1","index":"3.3"},{"id":"3.3-inline-function---2","title":"3.3 Inline Function - 2","index":"3.4"},{"id":"3.4-constructor-and-big-three-(rule-of-three)","title":"3.4 Constructor and Big Three (Rule of Three)","index":"3.5"},{"id":"3.5-initialization-list","title":"3.5 Initialization List","index":"3.6"}]},{"id":"4.-passing-and-returning-values","title":"4. Passing and Returning Values","index":"4","children":[{"id":"4.1.1-pass-by-value","title":"4.1.1 Pass by Value","index":"4.1"},{"id":"4.1.2-pass-by-reference","title":"4.1.2 Pass by Reference","index":"4.2"},{"id":"4.1.3-pass-by-reference-to-constant","title":"4.1.3 Pass by Reference to Constant","index":"4.3"},{"id":"4.2.1-return-by-value","title":"4.2.1 Return by Value","index":"4.4"},{"id":"4.2.2-return-by-reference","title":"4.2.2 Return by Reference","index":"4.5"}]},{"id":"5.-appendix---smart-pointer","title":"5. Appendix - Smart Pointer","index":"5","children":[{"id":"5.1-how-to-use","title":"5.1 How to Use","index":"5.1"}]},{"id":"6.-appendix---enum-class","title":"6. Appendix - Enum Class","index":"6","children":[{"id":"6.1-how-to-use","title":"6.1 How to Use","index":"6.1"}]},{"id":"7.-appendix---coding-style","title":"7. Appendix - Coding Style","index":"7","children":[{"id":"7.1-reference","title":"7.1 Reference","index":"7.1"}]},{"id":"thank-you!-:sheep:","title":"Thank you! :sheep:","index":"8"},{"id":"reference","title":"Reference","index":"9"}],"copyright":{"author":"Jimmy Shen","link":"<a href=\"http://Janes128.github.io/2023/03/18/Briefly-Class-in-C/\" title=\"Briefly Class in C++\">http://Janes128.github.io/2023/03/18/Briefly-Class-in-C/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International(<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)<br>","published":"March 18, 2023","updated":"March 18, 2023"},"reading_time":"859 words in 6 min"}